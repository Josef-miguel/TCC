{% set hide_header = true %}
{% extends "base.html" %}

{% block content %}
<style>
    /* Estilos específicos para a página de login */
    .login-container {
        background: var(--primary-color);
        min-height: calc(100vh - var(--navbar-height));
        padding: 4rem 0;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .login-card {
        background: var(--light-color);
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        width: 100%;
        max-width: 500px;
        margin: 0 auto;
    }

    .login-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.4);
    }

    .login-header {
        background-color: var(--secondary-color);
        color: var(--text-color);
        padding: 1.5rem;
        text-align: center;
    }

    .login-title {
        font-weight: 700;
        margin: 0;
        font-size: 1.8rem;
    }

    .login-body {
        padding: 2.5rem;
        background-color: var(--light-color);
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        font-weight: 600;
        color: var(--text-color);
        margin-bottom: 0.5rem;
        display: block;
    }

    .form-control {
        width: 100%;
        border: 1px solid var(--dark-color);
        border-radius: 8px;
        padding: 0.8rem 1rem;
        transition: all 0.3s ease;
        background-color: var(--primary-color);
        color: var(--text-color);
    }

    .form-control:focus {
        border-color: var(--secondary-color);
        box-shadow: 0 0 0 0.25rem rgba(243, 113, 0, 0.25);
        outline: none;
    }

    .form-check {
        display: flex;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .form-check-input {
        width: 1.2em;
        height: 1.2em;
        margin-right: 0.5rem;
    }

    .form-check-label {
        color: var(--text-color);
    }

    .btn-login {
        background-color: var(--secondary-color);
        color: var(--text-color);
        border: none;
        border-radius: 8px;
        padding: 0.8rem;
        font-weight: 600;
        letter-spacing: 0.5px;
        transition: all 0.3s ease;
        width: 100%;
        cursor: pointer;
        font-size: 1rem;
        margin-top: 1rem;
    }

    .btn-login:hover {
        background-color: #c35a00;
        transform: translateY(-2px);
    }

    .login-options {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 1.5rem 0;
    }

    .login-link {
        color: var(--secondary-color);
        text-decoration: none;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .login-link:hover {
        color: #e66900;
        text-decoration: underline;
    }

    .register-text {
        text-align: center;
        margin-top: 2rem;
        color: var(--text-color);
    }

    .invalid-feedback {
        color: #ff6b6b;
        font-size: 0.85rem;
        margin-top: 0.25rem;
        display: block;
    }

    .alert {
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1.5rem;
        font-size: 0.95rem;
    }

    .alert-danger {
        background-color: rgba(220, 53, 69, 0.2);
        color: #ff6b6b;
        border: 1px solid rgba(220, 53, 69, 0.3);
    }

    .alert-success {
        background-color: rgba(25, 135, 84, 0.2);
        color: #6bffa0;
        border: 1px solid rgba(25, 135, 84, 0.3);
    }

    .text-center {
        text-align: center;
    }

    .mb-0 {
        margin-bottom: 0;
    }

    /* Animações */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .login-card {
        animation: fadeIn 0.5s ease forwards;
    }

    /* Responsividade */
    @media (max-width: 768px) {
        .login-container {
            padding: 2rem 1rem;
        }
        
        .login-body {
            padding: 1.5rem;
        }
        
        .login-title {
            font-size: 1.5rem;
        }
        
        .login-options {
            flex-direction: column;
            gap: 1rem;
            align-items: flex-start;
        }
    }

    /* Estilos específicos para login social */
    .social-login {
        margin-top: 1.5rem;
        text-align: center;
    }

    .social-login p {
        color: var(--text-color);
        margin-bottom: 1rem;
        position: relative;
    }

    .social-login p::before,
    .social-login p::after {
        content: "";
        display: inline-block;
        width: 30%;
        height: 1px;
        background: var(--dark-color);
        position: absolute;
        top: 50%;
    }

    .social-login p::before {
        left: 0;
    }

    .social-login p::after {
        right: 0;
    }

    .social-buttons {
        display: flex;
        justify-content: center;
        gap: 1rem;
    }

    .social-btn {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .social-btn:hover {
        transform: translateY(-3px);
    }

    .google-btn {
        background: #DB4437;
        color: white;
    }

    .facebook-btn {
        background: #4267B2;
        color: white;
    }
</style>

<div class="container">
    <h2>Entrar</h2>
    <form id="loginForm">
      <div class="form-group">
        <label for="email">E-mail</label>
        <input type="email" id="email" name="email" required class="form-control">
      </div>

      <div class="form-group">
        <label for="password">Senha</label>
        <input type="password" id="password" name="password" required class="form-control">
      </div>

      <button type="submit" class="btn btn-primary">Entrar</button>
    </form>

    <p id="errorMessage" style="color: red; margin-top: 10px;"></p>
  </div>

{% endblock %}

{% block scripts %}
<!-- Adicione o SDK do Firebase -->
<script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-auth.js"></script>

<script>
    // Configuração do Firebase
    const firebaseConfig = {
        apiKey: "AIzaSyDbVaxU__hw2JArtq9BTaPqyjskP_ybPnY",
        authDomain: "jsg-tcc.firebaseapp.com",
        projectId: "jsg-tcc",
        storageBucket: "jsg-tcc.appspot.com",
        messagingSenderId: "658782512097",
        appId: "1:658782512097:web:55b0728c26a4fa9e16a8a0",
        measurementId: "G-W9QE4LFFN3"
    };

    // Inicialize o Firebase
    firebase.initializeApp(firebaseConfig);
    const auth = firebase.auth();

    // Login com email/senha
    document.getElementById('loginForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        const remember = document.getElementById('remember').checked;
        const loginButton = document.getElementById('loginButton');
        
        loginButton.disabled = true;
        loginButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Entrando...';
        
        auth.setPersistence(remember ? firebase.auth.Auth.Persistence.LOCAL : firebase.auth.Auth.Persistence.SESSION)
            .then(() => {
                return auth.signInWithEmailAndPassword(email, password);
            })
            .then((userCredential) => {
                // Usuário logado no Firebase, agora obter token e enviar para o backend
                return userCredential.user.getIdToken();
            })
            .then((idToken) => {
                // Enviar token para o backend para verificação
                return fetch('/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ token: idToken }),
                });
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.href = data.redirect || '/home';
                } else {
                    showError(data.message || 'Erro ao fazer login');
                    loginButton.disabled = false;
                    loginButton.innerHTML = 'Entrar';
                }
            })
            .catch((error) => {
                handleFirebaseError(error);
                loginButton.disabled = false;
                loginButton.innerHTML = 'Entrar';
            });
    });

    // Login com Google
    document.getElementById('googleLogin').addEventListener('click', function() {
        const provider = new firebase.auth.GoogleAuthProvider();
        socialLogin(provider);
    });

    // Login com Facebook
    document.getElementById('facebookLogin').addEventListener('click', function() {
        const provider = new firebase.auth.FacebookAuthProvider();
        socialLogin(provider);
    });

    // Função genérica para login social
    function socialLogin(provider) {
        auth.signInWithPopup(provider)
            .then((result) => {
                return result.user.getIdToken();
            })
            .then((idToken) => {
                return fetch('/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ token: idToken }),
                });
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.href = data.redirect || '/home';
                } else {
                    showError(data.message || 'Erro ao fazer login com rede social');
                }
            })
            .catch((error) => {
                handleFirebaseError(error);
            });
    }

    // Tratamento de erros do Firebase
    function handleFirebaseError(error) {
        let errorMessage = 'Erro ao fazer login';
        
        switch (error.code) {
            case 'auth/invalid-email':
                errorMessage = 'E-mail inválido';
                break;
            case 'auth/user-disabled':
                errorMessage = 'Esta conta foi desativada';
                break;
            case 'auth/user-not-found':
                errorMessage = 'Usuário não encontrado';
                break;
            case 'auth/wrong-password':
                errorMessage = 'Senha incorreta';
                break;
            case 'auth/too-many-requests':
                errorMessage = 'Muitas tentativas. Tente novamente mais tarde';
                break;
            case 'auth/popup-closed-by-user':
                // Usuário fechou a janela de login, não mostrar erro
                return;
            default:
                console.error('Erro no login:', error);
                errorMessage = error.message || 'Erro desconhecido';
        }
        
        showError(errorMessage);
    }

    // Mostrar mensagem de erro
    function showError(message) {
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-danger';
        alertDiv.textContent = message;
        
        const form = document.getElementById('loginForm');
        if (form.querySelector('.alert')) {
            form.querySelector('.alert').remove();
        }
        form.insertBefore(alertDiv, form.firstChild);
        
        // Rolagem suave para o topo para mostrar o erro
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    }

    // Adiciona classe de erro aos campos inválidos
    document.querySelectorAll('.is-invalid').forEach(element => {
        element.classList.add('is-invalid');
        element.addEventListener('input', function() {
            if (this.value.trim() !== '') {
                this.classList.remove('is-invalid');
                const feedback = this.nextElementSibling;
                if (feedback && feedback.classList.contains('invalid-feedback')) {
                    feedback.style.display = 'none';
                }
            }
        });
    });
</script>
{% endblock %}


